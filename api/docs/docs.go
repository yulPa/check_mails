// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-11-26 22:51:38.5619017 +0100 CET m=+0.069963946

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://yulpa.io",
        "contact": {
            "name": "Mathieu Tortuyaux",
            "email": "mathieu.tortuyaux@yulpa.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/abuses": {
            "get": {
                "description": "list abuses",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "abuse"
                ],
                "summary": "List abuses address",
                "operationId": "list-abuses",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/abuse.abuse"
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/utils.httpError"
                        }
                    }
                }
            }
        },
        "/abuses/{id}": {
            "get": {
                "description": "Returns an abuse adress by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "abuse"
                ],
                "summary": "Get an abuse adress by its ID",
                "operationId": "get-abuse",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Abuse ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/abuse.abuse"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/utils.httpError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove an abuse adress by its ID",
                "tags": [
                    "abuse"
                ],
                "summary": "Remove an abuse adress by its ID",
                "operationId": "delete-abuse",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Abuse ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/utils.httpError"
                        }
                    }
                }
            }
        },
        "/entities": {
            "get": {
                "description": "list entities",
                "produces": [
                    "application/json"
                ],
                "summary": "List entities",
                "operationId": "list-entities",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.entity"
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/utils.httpError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "abuse.abuse": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "description": "Name is the abuse address",
                    "type": "string"
                }
            }
        },
        "entity.entity": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "utils.httpError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "name": "entity"
        },
        {
            "name": "abuse"
        }
    ]
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1.0",
	Host:        "api-dev.yulmails.io",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "YulmailsAPI",
	Description: "Manage Yulmails resources from this API",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
