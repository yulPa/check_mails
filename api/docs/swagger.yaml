basePath: /
definitions:
  abuse.Abuse:
    properties:
      created:
        type: string
      id:
        type: integer
      name:
        description: Name is the abuse address
        type: string
    type: object
  conservation.Conservation:
    properties:
      created:
        type: string
      id:
        type: integer
      keep_email_content:
        description: KeepEmailContent will keep the body in DB
        type: boolean
      sent:
        description: Sent is the number of day to keep the email in DB
        type: integer
      unsent:
        description: Unsent is the number of day to keep unsent email in DB
        type: integer
    type: object
  domain.Domain:
    properties:
      conservation_id:
        type: integer
      created:
        type: string
      environment_id:
        type: integer
      id:
        type: integer
      name:
        description: Name is the domain address
        type: string
    type: object
  entity.Entity:
    properties:
      abuse_id:
        type: integer
      conservation_id:
        type: integer
      created:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        description: Name is the entity address
        type: string
    type: object
  utils.httpError:
    properties:
      error:
        type: string
      status:
        type: string
    type: object
host: api-dev.yulmails.io
info:
  contact:
    email: mathieu.tortuyaux@yulpa.io
    name: Mathieu Tortuyaux
  description: Manage Yulmails resources from this API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://yulpa.io
  title: YulmailsAPI
  version: 0.1.0
paths:
  /abuses:
    get:
      description: list abuses
      operationId: list-abuses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/abuse.Abuse'
            type: array
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.httpError'
      summary: List abuses address
      tags:
      - abuse
    post:
      consumes:
      - application/json
      description: Insert an abuse address in DB
      operationId: insert-abuse
      parameters:
      - description: insert abuse
        in: body
        name: Abuse
        required: true
        schema:
          $ref: '#/definitions/abuse.Abuse'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/abuse.Abuse'
        "406":
          description: Not Acceptable. A parameter is missing
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.httpError'
      summary: Insert an abuse address in DB
      tags:
      - abuse
  /abuses/{id}:
    delete:
      description: Remove an abuse adress by its ID
      operationId: delete-abuse
      parameters:
      - description: Abuse ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.httpError'
      summary: Remove an abuse adress by its ID
      tags:
      - abuse
    get:
      description: Returns an abuse adress by its ID
      operationId: get-abuse
      parameters:
      - description: Abuse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/abuse.Abuse'
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.httpError'
      summary: Get an abuse adress by its ID
      tags:
      - abuse
  /conservations:
    get:
      description: list conservations
      operationId: list-conservations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/conservation.Conservation'
            type: array
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.httpError'
      summary: List conservation rules
      tags:
      - conservation
    post:
      consumes:
      - application/json
      description: Insert a conservation rule in DB
      operationId: insert-conservation
      parameters:
      - description: insert conservation
        in: body
        name: Conservation
        required: true
        schema:
          $ref: '#/definitions/conservation.Conservation'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/conservation.Conservation'
        "406":
          description: Not Acceptable. A parameter is missing
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.httpError'
      summary: Insert a conservation in DB
      tags:
      - conservation
  /conservations/{id}:
    delete:
      description: Remove a conservation rule by its ID
      operationId: delete-conservation
      parameters:
      - description: Conservation ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.httpError'
      summary: Remove a conservation rule by its ID
      tags:
      - conservation
    get:
      description: Returns a conservation rule by its ID
      operationId: get-conservation
      parameters:
      - description: Conservation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/conservation.Conservation'
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.httpError'
      summary: Get a conservation rule by its ID
      tags:
      - conservation
  /domains:
    get:
      description: list domains
      operationId: list-domains
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Domain'
            type: array
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.httpError'
      summary: List domains
      tags:
      - domain
    post:
      consumes:
      - application/json
      description: Insert an domain in DB
      operationId: insert-domain
      parameters:
      - description: insert entity
        in: body
        name: Domain
        required: true
        schema:
          $ref: '#/definitions/domain.Domain'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Domain'
        "406":
          description: Not Acceptable. A parameter is missing
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.httpError'
      summary: Insert an domain in DB
      tags:
      - domain
  /domains/{id}:
    delete:
      description: Remove an domain adress by its ID
      operationId: delete-domain
      parameters:
      - description: Domain ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.httpError'
      summary: Remove an domain adress by its ID
      tags:
      - domain
    get:
      description: Returns an domain by its ID
      operationId: get-domain
      parameters:
      - description: Domain ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Domain'
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.httpError'
      summary: Get an domain by its ID
      tags:
      - domain
  /entities:
    get:
      description: list entities
      operationId: list-entities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Entity'
            type: array
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.httpError'
      summary: List entities
      tags:
      - entity
    post:
      consumes:
      - application/json
      description: Insert an entity in DB
      operationId: insert-entity
      parameters:
      - description: insert entity
        in: body
        name: Entity
        required: true
        schema:
          $ref: '#/definitions/entity.Entity'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Entity'
        "406":
          description: Not Acceptable. A parameter is missing
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.httpError'
      summary: Insert an entity in DB
      tags:
      - entity
  /entities/{id}:
    delete:
      description: Remove an entity adress by its ID
      operationId: delete-entity
      parameters:
      - description: Entity ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.httpError'
      summary: Remove an entity adress by its ID
      tags:
      - entity
    get:
      description: Returns an entity by its ID
      operationId: get-entity
      parameters:
      - description: Entity ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Entity'
        "404":
          description: Not Found
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.httpError'
      summary: Get an entity by its ID
      tags:
      - entity
swagger: "2.0"
tags:
- name: entity
- name: abuse
- name: conservation
